### Automatically generated GLASS config script for a single lens
###############################################################################
import os
import numpy as np

try:
    from Cocoa import NSSound
    from time import sleep
    sound = NSSound.alloc()
    sound.initWithContentsOfFile_byReference_('/System/Library/Sounds/Glass.aiff', True)
except ImportError:
    sound = False


### Meta info
dpath = ''
fname = 'Q0957+561'
fpath = os.path.join(dpath, fname)
glass_basis('glass.basis.pixels', solver='rwalk')
meta(author='GLSCFactory', notes='single-config-mode')
setup_log(fpath+'.log')


### Sampler config
samplex_random_seed(0)
samplex_acceptance(rate=0.25, tol=0.15)

exclude_all_priors()
include_prior(
    'lens_eq',
    'time_delay',
    'profile_steepness',
    'J3gradient',
    'magnification',
#    'hubble_constant',
    'PLsmoothness3',
#   'shared_h',
    'external_shear'
)


### Cosmology
omega(0.27, 0.73)
# hubble_constant(72.032)
# hubble_time(13.7)


###############################################################################
### Lens
name = 'Q0957+561'
zl = 0.3562
globject(name)
zlens(zl)

pixrad(8)
steepness(0.5, None)
# hires(1, 3)

smooth(2, include_central_pixel=False)
local_gradient(60)

# mapr = 4.278
# maprad(mapr)


### Source
zs = 1.413

# _AB1 = [[-4.805548219546776, -2.041044637481888],
#        [0.7110249916676369, 0.7775408142788142]]
# _AB2 = [[-4.413258568971529, 0.12149075223106384],
#        [1.0787965390819303, -1.0691186196333708]]

# Fadely et al. (2010)
# _ABCD = [[1.408, 5.034],  # A
#          [0.182, -1.018], # B
#          [2.878, 3.453],  # A2
#          [-1.362, -0.043], # B2
# ]
# [[1.408, 5.034], [0.182, -1.018], [2.86, 3.47], [-1.54, -0.05]]
# _parity =
pos_par_td = [[1.408, 5.034], 'min',
              [0.182, -1.018], 'sad', None]
AB1 = pos_par_td[0:1]+pos_par_td[2:-1:3]

if len(AB1) < 4:
    symm()
    shear(0.01)
else:
    shear(0.1)

source(zs, *pos_par_td)

tdelay = [0, 422.6]
tderr = [0, 0.6]
# explicit time delays
if tdelay:
    for i, td in enumerate(tdelay[1:]):
        if td:
            delay(AB1[i], AB1[i+1], [td-tderr[i+1], td+tderr[i+1]])


### Source 2
pos_par_td2 = [[2.878, 3.453], 'min',
               [-1.362, -0.043], 'sad', None]
AB2 = pos_par_td2[0:1]+pos_par_td2[2:-1:3]

if len(AB2) < 4:
    symm()
    shear(0.01)
else:
    shear(0.1)

source(zs, *pos_par_td2)

# tdelay = [0, 422.6]
# tderr = [0, 0.6]
# # tdelay = [0, 422.6]
# # tderr = [0, 0.6]
# # explicit time delays
# if tdelay:
#     for i, td in enumerate(tdelay[1:]):
#         if td:
#             delay(AB1[i], AB1[i+1], [td-tderr[i+1], td+tderr[i+1]])

###############################################################################
model(1000)
savestate(fpath+'.state')

if sound:
    sound.play()
    sleep(1)
    sound.stop()
