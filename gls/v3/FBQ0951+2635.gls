### Automatically generated GLASS config script for a single lens
###############################################################################
import os
import numpy as np

try:
    from Cocoa import NSSound
    from time import sleep
    sound = NSSound.alloc()
    sound.initWithContentsOfFile_byReference_('/System/Library/Sounds/Glass.aiff', True)
except ImportError:
    sound = False

 
### Meta info
dpath = ''
fname = 'FBQ0951+2635'
fpath = os.path.join(dpath, fname)
glass_basis('glass.basis.pixels', solver='rwalk')
meta(author='GLSCFactory', notes='single-config-mode')
setup_log(fpath+'.log')


### Sampler config
samplex_random_seed(0)
samplex_acceptance(rate=0.25, tol=0.15)

exclude_all_priors()
include_prior(
    'lens_eq',
    'time_delay',
    'profile_steepness',
    'J3gradient',
    'magnification',
#    'hubble_constant',
    'PLsmoothness3',
#   'shared_h',
    'external_shear'
)


### Cosmology
omega(0.27, 0.73)
# hubble_constant(72.032)
# hubble_time(13.7)


###############################################################################
### Lens
name = 'FBQ0951+2635'
zl = 0.26
globject(name)
zlens(zl)

pixrad(8)
steepness(0.5, None)
# hires(1, 3)

smooth(2, include_central_pixel=False)
local_gradient(60)

# mapr = 1.52
# maprad(mapr)


### Source
zs = 1.246

# _ABCD = [[-0.5851382112507824, 0.6459511857877821],
#	   [0.20739075841799898, -0.16882815083089794]]
_ABCD = [[-0.6350988147914237, 0.5878361507606975],
         [0.22168543535172372, -0.27313598924234367]]
# _ABCD =  [[-0.7521, 0.4603], [0.1462, -0.1733]]
# [[0.75, 0.459], [-0.142, -0.169]]
# _parity =
# pos_par_td = [[-0.7521, 0.4603], 'min', [0.1462, -0.1733], 'sad', None]
pos_par_td = [[-0.6350988147914237, 0.5878361507606975], 'min', [0.22168543535172372, -0.27313598924234367], 'sad', None]
ABCD = pos_par_td[0:1]+pos_par_td[2:-1:3]

if len(ABCD) < 4:
    symm()
    shear(0.01)
else:
    shear(0.3)

source(zs, *pos_par_td)

# tdelay = [0, 16]  # Jakobson et al. (2005)
# tderr = [0, 2]    # 1 sigma
tdelay = [0, 16]  # Jakobson et al. (2005)
tderr = [0, 6]    # 3 sigma
# explicit time delays
if tdelay:
    for i, td in enumerate(tdelay[1:]):
        if td:
            delay(ABCD[i], ABCD[i+1], [td-tderr[i+1], td+tderr[i+1]])


###############################################################################
model(1000)
savestate(fpath+'.state')

if sound:
    sound.play()
    sleep(2)
    sound.stop()
