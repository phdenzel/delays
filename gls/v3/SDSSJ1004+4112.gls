### Automatically generated GLASS config script for a single lens
###############################################################################
import os
import numpy as np

try:
    from Cocoa import NSSound
    from time import sleep
    sound = NSSound.alloc()
    sound.initWithContentsOfFile_byReference_('/System/Library/Sounds/Glass.aiff', True)
except ImportError:
    sound = False


### Meta info
dpath = ''
fname = 'SDSSJ1004+4112'
fpath = os.path.join(dpath, fname)
glass_basis('glass.basis.pixels', solver='rwalk')
meta(author='GLSCFactory', notes='single-config-mode')
setup_log(fpath+'.log')


### Sampler config
samplex_random_seed(0)
samplex_acceptance(rate=0.25, tol=0.15)

exclude_all_priors()
include_prior(
    'lens_eq',
    'time_delay',
    'profile_steepness',
    'J3gradient',
    'magnification',
    'PLsmoothness3',
#   'shared_h',
    'external_shear'
)


### Cosmology
omega(0.27, 0.73)

###############################################################################
### Lens
name = 'SDSSJ1004+4112'
zl = 0.68
globject(name)
zlens(zl)

pixrad(8)
steepness(0.25, None)
# hires(1, 3)

smooth(2, include_central_pixel=False)
local_gradient(60)

### Source
zs = 1.74

# _ABCD = [[8.832290155657526, -4.438265220161551],
#          [-5.768613205129752, -6.355969403705452],
#          [-2.4822760173617597, -8.188713439008858],
#          [-2.38363912836953, 4.645504306292178]]
# _ABCD = [[8.852434352730377, -4.439400331912108],
#	   [-5.7576138274618565, -6.356717047537057],
#	   [-2.4633367822600545, -8.187610441094272],
#	   [-2.3694804899075335, 4.637769248253825]]
# [[3.9437, -8.868], [-8.4136, -0.86], [-7.0963, -4.389], [1.3032, 5.327]]
pos_par_td = [[8.852434352730377, -4.439400331912108], 'min', [-5.7576138274618565, -6.356717047537057], 'min', None, [-2.4633367822600545, -8.187610441094272], 'sad', None, [-2.3694804899075335, 4.637769248253825], 'sad', None]
ABCD = pos_par_td[0:1]+pos_par_td[2:-1:3]

if len(ABCD) < 4:
    symm()
    shear(0.01)
else:
    shear(0.2)

source(zs, *pos_par_td)

tdelay = [0, 821.6, 40.6, None]
tderr = [0, 2.1, 1.8, None]
# explicit time delays
if tdelay:
    for i, td in enumerate(tdelay[1:]):
        if td:
            delay(ABCD[i], ABCD[i+1], [td-tderr[i+1], td+tderr[i+1]])


###############################################################################
model(1000)
savestate(fpath+'.state')

if sound:
    sound.play()
    sleep(1)
    sound.stop()
