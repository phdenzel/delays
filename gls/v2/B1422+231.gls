### Automatically generated GLASS config script for a single lens
###############################################################################
import os
import numpy as np


### Meta info
dpath = ''
fname = 'B1422+231'
fpath = os.path.join(dpath, fname)
glass_basis('glass.basis.pixels', solver='rwalk')
meta(author='GLSCFactory', notes='single-config-mode')
setup_log(fpath+'.log')


### Sampler config
samplex_random_seed(0)
samplex_acceptance(rate=0.25, tol=0.15)

exclude_all_priors()
include_prior(
    'lens_eq',
#    'time_delay',
    'profile_steepness',
    'J3gradient',
    'magnification',
#    'hubble_constant',
    'PLsmoothness3',
#   'shared_h',
    'external_shear'
)


### Cosmology
omega(0.27, 0.73)
# hubble_constant(72.032)
# hubble_time(13.7)


###############################################################################
### Lens
name = 'B1422+231'
zl = 0.339
globject(name)
zlens(zl)

pixrad(8)
steepness(0.25, None)
# hires(1, 3)

smooth(2, include_central_pixel=False)
local_gradient(30)

mapr = 1.5
maprad(mapr)


### Source
zs = 3.62

# _ABCD = [[1.0192832446989906, 0.36402973024965113],
# 	   [-0.08089549561103115, 1.039507118601782],
# 	   [0.4004327032746035, 0.9100743256241287],
# 	   [-0.13347756775820135, -0.22650738771089463]]
# [[1.014, -0.168], [0.291, 0.9], [0.68, 0.58], [-0.271, -0.222]]
# _parity =
pos_par_td = [[1.02, 0.36], 'min', [-0.08, 1.04], 'min', None, [0.40, 0.91], 'sad', None, [-0.13, -0.23], 'sad', None]
ABCD = pos_par_td[0:1]+pos_par_td[2:-1:3]

if len(ABCD) < 4:
    symm()
    shear(0.05)
else:
    shear(0.5)

source(zs, *pos_par_td)

tdelay = []
tderr = []
# tdelay = [0, 7.6, 1.5, None]
# tderr = [0, 2.5, 1.4, None]
# tdelay = [0, 0.4, 1.5, None]
# tderr = [0, 0.4, 1.4, None]
# E.Eulaers and P. Magain (2011)
# tdelay = [0, 2.0, 1.0, None]
# tderr = [0, 0.5, 0.2, None]
# tdelay = [0, None, 1.6, 0.8, None]
# tderr = [0, None, 2.1, 2.9, None]
 
# explicit time delays
if tdelay:
    for i, td in enumerate(tdelay[1:]):
        if td:
            delay(ABCD[i], ABCD[i+1], [td-tderr[i+1], td+tderr[i+1]])

###############################################################################
model(1000)
savestate(fpath+'.state')
