### Automatically generated GLASS config script for a single lens
###############################################################################
import os
import numpy as np

try:
    from Cocoa import NSSound
    from time import sleep
    sound = NSSound.alloc()
    sound.initWithContentsOfFile_byReference_('/System/Library/Sounds/Glass.aiff', True)
except ImportError:
    sound = False


### Meta info
dpath = ''
fname = 'B0218+357'
fpath = os.path.join(dpath, fname)
glass_basis('glass.basis.pixels', solver='rwalk')
meta(author='GLSCFactory', notes='single-config-mode')
setup_log(fpath+'.log')


### Sampler config
samplex_random_seed(0)
samplex_acceptance(rate=0.25, tol=0.15)

exclude_all_priors()
include_prior(
    'lens_eq',
    'time_delay',
    'profile_steepness',
    'J3gradient',
    'magnification',
#    'hubble_constant',
    'PLsmoothness3',
#    'shared_h',
#    'external_mass',
    'external_shear'
)


### Cosmology
omega(0.27, 0.73)
# hubble_constant(72.032)
# hubble_time(13.7)


###############################################################################
### Lens
name = 'B0218+357'
zl = 0.685
globject(name)
zlens(zl)

pixrad(8)
steepness(0.5, None)
# hires(1, 3)

smooth(2, include_central_pixel=False)
local_gradient(45)

# mapr = 0.25  # default: 0.2152
# maprad(mapr)


### Source
zs = 0.944

# _ABCD = [[0.16410257059712194, -0.09230769596088108],
#          [-0.1461538519380617, 0.029487180654170365]]
# _ABCD = [[-0.1980, 0.0941],
#          [0.1093, 0.0332]]
# [[0.25, -0.119], [-0.052, 0.007]]
# _parity =
# pos_par_td = [[0.16410257059712194, -0.09230769596088108], 'min', [-0.1461538519380617, 0.029487180654170365], 'sad', None]
pos_par_td = [[0.1980, -0.0941], 'min', [-0.1093, 0.0332], 'sad', None]
ABCD = pos_par_td[0:1]+pos_par_td[2:-1:3]

if len(ABCD) < 4:
    symm()
    shear(0.01)
else:
    shear(0.3)

source(zs, *pos_par_td)

# tdelay = [0, 10.1]  # Paraficz et al. (2010) @ 95% c.l.
# tderr = [0, 1.6]  # Paraficz et al. (2010) @ 95% c.l.
# tdelay = [0, 9.9]  # Eulaers et al. (2011)
# tderr = [0, [-0.9, 4.0]]  # Eulaers et al. (2011)
tdelay = [0, 11.3]  # Biggs et al. (2018)  @ 5 sigma
tderr = [0, 2.0]  # Biggs et al. (2018) @ 5 sigma


# explicit time delays
if tdelay:
    for i, td in enumerate(tdelay[1:]):
        if td:
            err = tderr[i+1]
            if isinstance(err, (list, tuple, np.ndarray)):
                delay(ABCD[i], ABCD[i+1], [td+err[0], td+err[1]])
            else:
                delay(ABCD[i], ABCD[i+1], [td-err, td+err])


###############################################################################
model(1000)
savestate(fpath+'.state')

if sound:
    sound.play()
    sleep(2)
    sound.stop()
